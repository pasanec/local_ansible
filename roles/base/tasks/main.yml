- name: Install base dependencies
  apt:
    name:
      - ripgrep
      - fd-find
      - bat
      - git
      - php
      - zip
      - unzip
      - build-essential
      - make
      - curl
    state: latest
  when: ansible_distribution == "Ubuntu"

- name: Add neovim PPA
  apt_repository:
    repo: ppa:neovim-ppa/stable
    state: present
    update_cache: yes

- name: Install neovim from PPA
  apt:
    name:
      - neovim
    state: latest

- name: clone neovim configuration
  become: false
  ansible.builtin.git:
    repo: 'https://github.com/pasanec/kickstart.nvim.git'
    dest: ~/.config/nvim
    version: ijp

- name: Create intelephense directory
  become: false
  ansible.builtin.file:
    path: ~/intelephense
    state: directory
    mode: '0755'

- name: Copy intelephense activation key
  become: false
  ansible.builtin.copy:
    content: "{{ intelephense_activation_key }}"
    dest: ~/intelephense/licence.txt
    mode: '0600'

- name: Ensure system nodejs/npm are not installed (to avoid interference with nvm)
  apt:
    name:
      - nodejs
      - npm
    state: absent
  when: ansible_distribution == "Ubuntu"

- name: Install nvm
  become: false
  ansible.builtin.shell:
    cmd: "curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash"
    creates: ~/.nvm/nvm.sh

- name: Install Node.js LTS via nvm
  become: false
  ansible.builtin.shell:
    cmd: "source ~/.nvm/nvm.sh && nvm install --lts"
    creates: ~/.nvm/versions/node
    executable: /bin/bash

- name: Install Gemini CLI via npm
  become: false
  ansible.builtin.shell:
    cmd: "source ~/.nvm/nvm.sh && npm install -g @google/gemini-cli"
    creates: ~/.nvm/versions/node/*/bin/gemini
    executable: /bin/bash

- name: Add GitHub CLI repository key
  apt_key:
    url: https://cli.github.com/packages/githubcli-archive-keyring.gpg
    state: present
    keyring: /usr/share/keyrings/githubcli-archive-keyring.gpg

- name: Add GitHub CLI repository
  apt_repository:
    repo: "deb [arch=amd64 signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main"
    state: present
    filename: github-cli

- name: Install GitHub CLI
  apt:
    name: gh
    state: latest
    update_cache: yes

- name: Install GitHub Copilot CLI extension
  become: false
  ansible.builtin.shell:
    cmd: "gh extension install github/gh-copilot"
    creates: ~/.local/share/gh/extensions/gh-copilot
  register: gh_copilot_install
  failed_when: false
  changed_when: gh_copilot_install.rc == 0

- name: Notify if GitHub Copilot CLI installation was skipped
  ansible.builtin.debug:
    msg: "Note: GitHub CLI requires authentication. Run 'gh auth login' first, then install Copilot CLI with: gh extension install github/gh-copilot"
  when: gh_copilot_install.rc != 0

- name: Install uv (Python package manager)
  become: false
  ansible.builtin.shell:
    cmd: "curl -LsSf https://astral.sh/uv/install.sh | sh"
    creates: ~/.local/bin/uv

- name: Install Spec Kit CLI
  become: false
  ansible.builtin.shell:
    cmd: "~/.local/bin/uv tool install specify-cli --from git+https://github.com/github/spec-kit.git"
    creates: ~/.local/share/uv/tools/specify-cli

- name: Check if running in WSL
  ansible.builtin.shell:
    cmd: "grep -qi microsoft /proc/version && echo 'true' || echo 'false'"
  register: is_wsl
  changed_when: false

- name: Enable systemd in WSL (if WSL detected)
  become: false
  ansible.builtin.lineinfile:
    path: /etc/wsl.conf
    line: |
      [boot]
      systemd=true
    create: yes
    mode: '0644'
  when: is_wsl.stdout == 'true'
  become: yes

- name: Notify user about WSL restart requirement
  ansible.builtin.debug:
    msg: "WSL detected - systemd has been enabled. You need to restart WSL (run 'wsl --shutdown' from Windows) for Docker to work properly."
  when: is_wsl.stdout == 'true'

- name: Install Docker prerequisites
  apt:
    name:
      - ca-certificates
      - curl
      - gnupg
      - lsb-release
    state: present
    update_cache: yes

- name: Create Docker GPG keyring directory
  ansible.builtin.file:
    path: /etc/apt/keyrings
    state: directory
    mode: '0755'

- name: Add Docker GPG key
  ansible.builtin.shell:
    cmd: "curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg"
    creates: /etc/apt/keyrings/docker.gpg

- name: Set Docker GPG key permissions
  ansible.builtin.file:
    path: /etc/apt/keyrings/docker.gpg
    mode: '0644'

- name: Add Docker repository
  apt_repository:
    repo: "deb [arch=amd64 signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
    state: present
    filename: docker

- name: Install Docker
  apt:
    name:
      - docker-ce
      - docker-ce-cli
      - containerd.io
      - docker-buildx-plugin
      - docker-compose-plugin
    state: latest
    update_cache: yes

- name: Add user to docker group
  ansible.builtin.user:
    name: "{{ ansible_user_id }}"
    groups: docker
    append: yes

- name: Ensure Docker service is enabled and started (skip in WSL)
  ansible.builtin.systemd:
    name: docker
    enabled: yes
    state: started
  when: is_wsl.stdout == 'false'

- name: Check if desktop environment is installed
  ansible.builtin.shell:
    cmd: "echo $XDG_CURRENT_DESKTOP"
  environment:
    XDG_CURRENT_DESKTOP: "{{ ansible_env.XDG_CURRENT_DESKTOP | default('') }}"
  register: desktop_check
  changed_when: false
  become: false

- name: Download Google Chrome
  ansible.builtin.get_url:
    url: https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
    dest: /tmp/google-chrome-stable_current_amd64.deb
    mode: '0644'
  when: 
    - is_wsl.stdout == 'false'
    - desktop_check.stdout != ''

- name: Install Google Chrome
  apt:
    deb: /tmp/google-chrome-stable_current_amd64.deb
    state: present
  when: 
    - is_wsl.stdout == 'false'
    - desktop_check.stdout != ''

- name: Remove Chrome deb file
  ansible.builtin.file:
    path: /tmp/google-chrome-stable_current_amd64.deb
    state: absent
  when: 
    - is_wsl.stdout == 'false'
    - desktop_check.stdout != ''

- name: Install JetBrains Mono font
  apt:
    name: fonts-jetbrains-mono
    state: present
  when: 
    - is_wsl.stdout == 'false'
    - desktop_check.stdout != ''

- name: Update font cache
  ansible.builtin.shell:
    cmd: "fc-cache -f -v"
  when: 
    - is_wsl.stdout == 'false'
    - desktop_check.stdout != ''
  changed_when: false

- name: Set JetBrains Mono as GNOME Terminal font
  become: false
  community.general.dconf:
    key: "/org/gnome/terminal/legacy/profiles:/:{{ gnome_terminal_profile_id }}/font"
    value: "'JetBrains Mono 11'"
    state: present
  vars:
    gnome_terminal_profile_id: "{{ lookup('pipe', 'gsettings get org.gnome.Terminal.ProfilesList default | tr -d \"\\047\"') }}"
  when: 
    - is_wsl.stdout == 'false'
    - desktop_check.stdout != ''
    - "'GNOME' in desktop_check.stdout or 'ubuntu' in desktop_check.stdout"
  ignore_errors: yes

- name: Enable custom font in GNOME Terminal
  become: false
  community.general.dconf:
    key: "/org/gnome/terminal/legacy/profiles:/:{{ gnome_terminal_profile_id }}/use-system-font"
    value: "false"
    state: present
  vars:
    gnome_terminal_profile_id: "{{ lookup('pipe', 'gsettings get org.gnome.Terminal.ProfilesList default | tr -d \"\\047\"') }}"
  when: 
    - is_wsl.stdout == 'false'
    - desktop_check.stdout != ''
    - "'GNOME' in desktop_check.stdout or 'ubuntu' in desktop_check.stdout"
  ignore_errors: yes

- name: Remap Caps Lock to Escape in GNOME (for Ubuntu Desktop)
  become: false
  community.general.dconf:
    key: "/org/gnome/desktop/input-sources/xkb-options"
    value: "['caps:escape']"
    state: present
  when: 
    - is_wsl.stdout == 'false'
    - desktop_check.stdout != ''
    - "'GNOME' in desktop_check.stdout or 'ubuntu' in desktop_check.stdout"
  ignore_errors: yes

- name: Create .xmodmap file for X11 sessions (fallback)
  become: false
  ansible.builtin.copy:
    content: |
      ! Remap Caps Lock to Escape
      clear lock
      clear control
      keycode 66 = Escape NoSymbol Escape
      keycode 9 = Caps_Lock NoSymbol Caps_Lock
      add control = Control_L Control_R
    dest: ~/.xmodmap
    mode: '0644'
  when: 
    - is_wsl.stdout == 'false'
    - desktop_check.stdout != ''

- name: Create autostart directory
  become: false
  ansible.builtin.file:
    path: ~/.config/autostart
    state: directory
    mode: '0755'
  when: 
    - is_wsl.stdout == 'false'
    - desktop_check.stdout != ''

- name: Create xmodmap autostart entry
  become: false
  ansible.builtin.copy:
    content: |
      [Desktop Entry]
      Type=Application
      Name=Xmodmap Caps Lock Remap
      Exec=xmodmap ~/.xmodmap
      Terminal=false
      X-GNOME-Autostart-enabled=true
      Comment=Remap Caps Lock to Escape on login
    dest: ~/.config/autostart/xmodmap-capslock.desktop
    mode: '0644'
  when: 
    - is_wsl.stdout == 'false'
    - desktop_check.stdout != ''
